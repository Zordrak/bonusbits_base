---

verifier:
  name: inspec
  format: <%= ENV['CI'] ? 'junit' : 'cli' %>
  <% if ENV['CI'] %>
  output: "reports/%{platform}_%{suite}_inspec.xml"
  <% end %>
  inspec_tests:
    - name: bootstrap
      git: https://github.com/bonusbits/inspec_bootstrap.git
    - name: bonusbits_base
      git: https://github.com/bonusbits/inspec_bonusbits_base.git
#        - path: ../inspec_bonusbits_base
  attributes:
    debug: 'false'
    chef_version: '12.21.4'

provisioner:
  name: chef_zero
  require_chef_omnibus: 12.21.4
  # always_update_cookbooks: true
  data_bags_path: test/data_bags
  encrypted_data_bag_secret_key_path: test/data_bags/encrypted_data_bag_secret
  roles_path: test/roles
  environments_path: test/environments

platforms:
  # AWS AMI/EC2 Platforms
  - name: amazon-ami
    driver:
      name: ec2
      image_search:
        owner-id: 137112412989
        name: amzn-ami-hvm-2017.*x86_64-gp2
      instance_initiated_shutdown_behavior: terminate
      associate_public_ip: <%= ENV['AWS_PUBLIC_IP'] %>
      aws_ssh_key_id: <%= ENV['AWS_SSH_KEY_ID'] %>
      security_group_ids:
      <% (1..5).collect { |n| ENV["AWS_SECURITY_GROUP_#{n}"] }.compact.each do |secgroup| %>
        - <%= secgroup %>
      <% end %>
      subnet_id: <%= ENV['AWS_SUBNET'] %>
      vpc_id: <%= ENV['AWS_VPC_ID'] %>
      region: <%= ENV['AWS_REGION'] %>
      iam_profile_name: <%= ENV['AWS_IAM_INSTANCE_PROFILE_1'] %>
      instance_type: t2.micro
      tags:
        Created-By: Test Kitchen
        Owner: <%= ENV['USER'] %>
        OS: Amazon 2017
    transport:
      username: ec2-user
      ssh_key: <%= ENV['AWS_SSH_KEY_PATH'] %>

  - name: rhel6-ami
    driver:
      name: ec2
      image_search:
        owner-id: 309956199498
        name: RHEL-6.?_HVM_GA-*-x86_64-1-Hourly2-GP2
      instance_initiated_shutdown_behavior: terminate
      associate_public_ip: <%= ENV['AWS_PUBLIC_IP'] %>
      aws_ssh_key_id: <%= ENV['AWS_SSH_KEY_ID'] %>
      security_group_ids:
      <% (1..5).collect { |n| ENV["AWS_SECURITY_GROUP_#{n}"] }.compact.each do |secgroup| %>
        - <%= secgroup %>
      <% end %>
      subnet_id: <%= ENV['AWS_SUBNET'] %>
      vpc_id: <%= ENV['AWS_VPC_ID'] %>
      region: <%= ENV['AWS_REGION'] %>
      iam_profile_name: <%= ENV['AWS_IAM_INSTANCE_PROFILE_1'] %>
      instance_type: t2.micro
      tags:
        Created-By: Test Kitchen
        Owner: <%= ENV['USER'] %>
        OS: RHEL 6
    transport:
      username: ec2-user
      ssh_key: <%= ENV['AWS_SSH_KEY_PATH'] %>

  - name: rhel7-ami
    driver:
      name: ec2
      image_search:
        owner-id: 309956199498
        name: RHEL-7.?_HVM_GA-*-x86_64-1-Hourly2-GP2
      instance_initiated_shutdown_behavior: terminate
      associate_public_ip: <%= ENV['AWS_PUBLIC_IP'] %>
      aws_ssh_key_id: <%= ENV['AWS_SSH_KEY_ID'] %>
      security_group_ids:
      <% (1..5).collect { |n| ENV["AWS_SECURITY_GROUP_#{n}"] }.compact.each do |secgroup| %>
        - <%= secgroup %>
      <% end %>
      subnet_id: <%= ENV['AWS_SUBNET'] %>
      vpc_id: <%= ENV['AWS_VPC_ID'] %>
      region: <%= ENV['AWS_REGION'] %>
      iam_profile_name: <%= ENV['AWS_IAM_INSTANCE_PROFILE_1'] %>
      instance_type: t2.micro
      tags:
        Created-By: Test Kitchen
        Owner: <%= ENV['USER'] %>
        OS: RHEL 7
    transport:
      username: ec2-user
      ssh_key: <%= ENV['AWS_SSH_KEY_PATH'] %>

  - name: ubuntu-14.04-ami
    driver:
      name: ec2
      image_search:
        owner-id: 309956199498
        name: TODO!
      instance_initiated_shutdown_behavior: terminate
      associate_public_ip: <%= ENV['AWS_PUBLIC_IP'] %>
      aws_ssh_key_id: <%= ENV['AWS_SSH_KEY_ID'] %>
      security_group_ids:
      <% (1..5).collect { |n| ENV["AWS_SECURITY_GROUP_#{n}"] }.compact.each do |secgroup| %>
        - <%= secgroup %>
      <% end %>
      subnet_id: <%= ENV['AWS_SUBNET'] %>
      vpc_id: <%= ENV['AWS_VPC_ID'] %>
      region: <%= ENV['AWS_REGION'] %>
      iam_profile_name: <%= ENV['AWS_IAM_INSTANCE_PROFILE_1'] %>
      instance_type: t2.micro
      tags:
        Created-By: Test Kitchen
        Owner: <%= ENV['USER'] %>
        OS: Ubuntu 14.04
    transport:
      username: ubuntu
      ssh_key: <%= ENV['AWS_SSH_KEY_PATH'] %>

  - name: ubuntu-16.04-ami
    driver:
      name: ec2
      image_search:
        owner-id: 309956199498
        name: TODO! # TODO:
      instance_initiated_shutdown_behavior: terminate
      associate_public_ip: <%= ENV['AWS_PUBLIC_IP'] %>
      aws_ssh_key_id: <%= ENV['AWS_SSH_KEY_ID'] %>
      security_group_ids:
      <% (1..5).collect { |n| ENV["AWS_SECURITY_GROUP_#{n}"] }.compact.each do |secgroup| %>
        - <%= secgroup %>
      <% end %>
      subnet_id: <%= ENV['AWS_SUBNET'] %>
      vpc_id: <%= ENV['AWS_VPC_ID'] %>
      region: <%= ENV['AWS_REGION'] %>
      iam_profile_name: <%= ENV['AWS_IAM_INSTANCE_PROFILE_1'] %>
      instance_type: t2.micro
      tags:
        Created-By: Test Kitchen
        Owner: <%= ENV['USER'] %>
        OS: Ubuntu 16.04
    transport:
      username: ubuntu
      ssh_key: <%= ENV['AWS_SSH_KEY_PATH'] %>

  - name: windows-2012r2-ami
    driver:
      name: ec2
      image_search:
        owner-id: 309956199498
        name: TODO! # TODO:
      instance_initiated_shutdown_behavior: terminate
      associate_public_ip: <%= ENV['AWS_PUBLIC_IP'] %>
      aws_ssh_key_id: <%= ENV['AWS_SSH_KEY_ID'] %>
      security_group_ids:
      <% (1..5).collect { |n| ENV["AWS_SECURITY_GROUP_#{n}"] }.compact.each do |secgroup| %>
        - <%= secgroup %>
      <% end %>
      subnet_id: <%= ENV['AWS_SUBNET'] %>
      vpc_id: <%= ENV['AWS_VPC_ID'] %>
      region: <%= ENV['AWS_REGION'] %>
      iam_profile_name: <%= ENV['AWS_IAM_INSTANCE_PROFILE_1'] %>
      instance_type: t2.micro
      tags:
        Created-By: Test Kitchen
        Owner: <%= ENV['USER'] %>
        OS: Windows 2012R2
    transport:
      username: administrator
      ssh_key: <%= ENV['AWS_SSH_KEY_PATH'] %>

  - name: windows-2016-ami
    driver:
      name: ec2
      image_search:
        owner-id: 309956199498
        name: TODO! # :TODO
      instance_initiated_shutdown_behavior: terminate
      associate_public_ip: <%= ENV['AWS_PUBLIC_IP'] %>
      aws_ssh_key_id: <%= ENV['AWS_SSH_KEY_ID'] %>
      security_group_ids:
      <% (1..5).collect { |n| ENV["AWS_SECURITY_GROUP_#{n}"] }.compact.each do |secgroup| %>
        - <%= secgroup %>
      <% end %>
      subnet_id: <%= ENV['AWS_SUBNET'] %>
      vpc_id: <%= ENV['AWS_VPC_ID'] %>
      region: <%= ENV['AWS_REGION'] %>
      iam_profile_name: <%= ENV['AWS_IAM_INSTANCE_PROFILE_1'] %>
      instance_type: t2.micro
      tags:
        Created-By: Test Kitchen
        Owner: <%= ENV['USER'] %>
        OS: Windows 2016
    transport:
      username: administrator
      ssh_key: <%= ENV['AWS_SSH_KEY_PATH'] %>

  # Docker Platforms
  - name: amazon-docker
    driver:
      name: docker
      use_sudo: false # For Native Docker on Mac. Remove/Comment if using Toolbox (docker-machine)
      image: amazonlinux:latest
      platform: rhel
      provision_command:
#        - echo "export http_proxy=<%= ENV['http_proxy']%>" > /etc/profile.d/proxy.sh
#        - echo "export https_proxy=<%= ENV['https_proxy']%>" >> /etc/profile.d/proxy.sh
#        - echo "export no_proxy=<%= ENV['no_proxy']%>" >> /etc/profile.d/proxy.sh
#        - export http_proxy="<%= ENV['http_proxy']%>"
#        - export https_proxy="<%= ENV['https_proxy']%>"
#        - export no_proxy="<%= ENV['no_proxy']%>"
        - yum -y install upstart procps util-linux
      ssl_verify_mode: ":verify_none"
#      http_proxy: <%= ENV['http_proxy']%>
#      https_proxy: <%= ENV['https_proxy']%>
#      no_proxy: <%= ENV['no_proxy']%>
      run_command: /usr/sbin/init
      privileged: true
      provision_command:
        - systemctl enable sshd.service

  - name: amazon1-docker
    driver:
      name: docker
      use_sudo: false # For Native Docker on Mac. Remove/Comment if using Toolbox (docker-machine)
      image: amazonlinux:2018.03
      platform: rhel
      provision_command:
#        - echo "export http_proxy=<%= ENV['http_proxy']%>" > /etc/profile.d/proxy.sh
#        - echo "export https_proxy=<%= ENV['https_proxy']%>" >> /etc/profile.d/proxy.sh
#        - echo "export no_proxy=<%= ENV['no_proxy']%>" >> /etc/profile.d/proxy.sh
#        - export http_proxy="<%= ENV['http_proxy']%>"
#        - export https_proxy="<%= ENV['https_proxy']%>"
#        - export no_proxy="<%= ENV['no_proxy']%>"
        - yum -y install upstart procps util-linux
      ssl_verify_mode: ":verify_none"
#      http_proxy: <%= ENV['http_proxy']%>
#      https_proxy: <%= ENV['https_proxy']%>
#      no_proxy: <%= ENV['no_proxy']%>

suites:
  - name: ec2_base
    provisioner:
      client_rb:
        environment: bonusbits_base
    driver:
      tags:
        Name: kitchen-bonusbits-base-<%= ENV['USER'] %>
    run_list:
      - role[base]
    verifier:
      attributes:
        configure_backups: 'true'
    includes: ["amazon-ami"]

  - name: ec2_base_java
    provisioner:
      client_rb:
        environment: bonusbits_base_java
    driver:
      tags:
        Name: kitchen-bonusbits-base-<%= ENV['USER'] %>
    run_list:
      - role[base]
    verifier:
      attributes:
        configure_backups: 'false'
        install_java: 'true'
        java_package_name: 'java-1.8.0-openjdk'
        specify_version: 'false'
        java_version: '1.8.0.151-1.b12.35.amzn1'
    includes: ["amazon-ami"]

  - name: ec2_base_epel_repo
    provisioner:
      client_rb:
        environment: bonusbits_base_epel_repo
    driver:
      tags:
        Name: kitchen-bonusbits-base-epel-<%= ENV['USER'] %>
        Created-By: Test Kitchen
        Owner: <%= ENV['USER'] %>
    run_list:
      - role[base]
    verifier:
      attributes:
        configure_epel: 'true'
        install_epel_packages: 'true'
    includes: ["amazon-ami"]

  - name: ec2_base_no_software
    provisioner:
      client_rb:
        environment: bonusbits_base_no_software
    driver:
      tags:
        Name: kitchen-bonusbits-base-no-software<%= ENV['USER'] %>
        Created-By: Test Kitchen
        Owner: <%= ENV['USER'] %>
    run_list:
      - role[base]
    verifier:
      attributes:
        install_packages: 'false'
    includes: ["amazon-ami"]

  - name: docker_base
    run_list:
      - role[base]
    provisioner:
      client_rb:
        environment: bonusbits_base
    attributes:
      <% if ENV['CIRCLECI'] %>
      bonusbits_base:
        deployment_location: 'circleci'
      <% end %>
    includes: ["amazon-docker","amazon1-docker"]

  - name: docker_base_java
    run_list:
      - role[base]
    provisioner:
      client_rb:
        environment: bonusbits_base_java
    attributes:
      <% if ENV['CIRCLECI'] %>
      bonusbits_base:
        deployment_location: 'circleci'
      <% end %>
    verifier:
      attributes:
        install_java: 'true'
        java_package_name: 'java-1.8.0-openjdk'
        specify_version: 'false'
        java_version: '1.8.0.151-1.b12.35.amzn1'
    includes: ["amazon-docker"]

  - name: docker_base_epel_repo
    run_list:
      - role[base]
    provisioner:
      client_rb:
        environment: bonusbits_base_epel_repo
    verifier:
      attributes:
        configure_epel: 'true'
        install_epel_packages: 'true'
    attributes:
      <% if ENV['CIRCLECI'] %>
      bonusbits_base:
        deployment_location: 'circleci'
      <% end %>
    includes: ["amazon-docker"]

  - name: docker_base_no_software
    run_list:
      - role[base]
    provisioner:
      client_rb:
        environment: bonusbits_base_no_software
    verifier:
      attributes:
        install_packages: 'false'
    attributes:
      <% if ENV['CIRCLECI'] %>
      bonusbits_base:
        deployment_location: 'circleci'
      <% end %>
    includes: ["amazon-docker"]
